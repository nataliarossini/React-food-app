{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMsg, setError] = useState(null);\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong');\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    errorMsg,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"KPBV+sWdk3ngQtD/ToF4/jZ/vjk=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/nataliarossini/code/nataliarossini/React-food-app/src/hooks/use-https.js"],"names":["useState","useCallback","useHttp","isLoading","setIsLoading","errorMsg","setError","sendRequest","requestConfig","applyData","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,QAAD,EAAWC,QAAX,IAAuBN,QAAQ,CAAC,IAAD,CAArC;AAEA,QAAMO,WAAW,GAAGN,WAAW,CAAC,OAAOO,aAAP,EAAsBC,SAAtB,KAAoC;AAChEL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,aAAa,CAACI,GAAf,EAAoB;AAC5CC,QAAAA,MAAM,EAAEL,aAAa,CAACK,MAAd,GAAuBL,aAAa,CAACK,MAArC,GAA8C,KADV;AAE5CC,QAAAA,OAAO,EAAEN,aAAa,CAACM,OAAd,GAAwBN,aAAa,CAACM,OAAtC,GAAgD,EAFb;AAG5CC,QAAAA,IAAI,EAAEP,aAAa,CAACO,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeT,aAAa,CAACO,IAA7B,CAArB,GAA0D;AAHpB,OAApB,CAA5B;;AAKA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAZ,MAAAA,SAAS,CAACW,IAAD,CAAT;AACH,KAZD,CAYE,OAAOE,GAAP,EAAY;AACVhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,sBAAhB,CAAR;AACH;;AAEDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GApB8B,EAoB5B,EApB4B,CAA/B;AAqBA,SAAO;AACHD,IAAAA,SADG;AAEHE,IAAAA,QAFG;AAGHE,IAAAA;AAHG,GAAP;AAKH,CA9BD;;GAAML,O;;AAgCN,eAAeA,OAAf","sourcesContent":["import { useState, useCallback } from \"react\";\n\nconst useHttp = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [errorMsg, setError] = useState(null);\n\n    const sendRequest = useCallback(async (requestConfig, applyData) => {\n        setIsLoading(true);\n        setError(null);\n        try {\n            const response = await fetch(requestConfig.url, {\n                method: requestConfig.method ? requestConfig.method : 'GET',\n                headers: requestConfig.headers ? requestConfig.headers : {},\n                body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n            });\n            if (!response.ok) {\n                throw new Error('Request failed!');\n            }\n\n            const data = await response.json();\n            applyData(data);\n        } catch (err) {\n            setError(err.message || 'Something went wrong');\n        }\n\n        setIsLoading(false);\n    }, []);\n    return {\n        isLoading,\n        errorMsg,\n        sendRequest,\n    };\n};\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}